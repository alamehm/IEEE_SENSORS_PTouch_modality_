# -*- coding: utf-8 -*-
"""ConvLSTM-Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ThK8GgzT8vjeMmKtbtlN12B5NHdNAWq6
"""

from google.colab import drive
drive.mount('/content/drive')
!ls "/content/drive/My Drive"

from keras.models import Model
from keras.layers import Input
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D ,Conv3D
from keras.layers.pooling import MaxPooling2D
from keras.optimizers import Adam,SGD
from sklearn.model_selection import train_test_split
import numpy as np
import pickle
from sklearn.utils import shuffle
from keras import backend as K
from keras.utils import np_utils
import matplotlib.pyplot as plt
from keras.preprocessing.image import load_img
# import os,cv2
from keras.layers import Dropout
from keras.layers import BatchNormalization , Activation
from keras.models import Sequential
from keras.layers import concatenate
from keras import backend as K
K.common.image_dim_ordering()
import tensorflow as tf
from keras.preprocessing import image
from keras.applications.imagenet_utils import preprocess_input
import os,cv2

import numpy as np
import pickle
import math

from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_recall_fscore_support

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable
import itertools
import matplotlib.pyplot as plt
# Device configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
#device = torch.device('cpu')
print(device)
from keras.models import Sequential
from numpy import mean
from numpy import std
from numpy import dstack
from pandas import read_csv
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers import Dropout
from keras.layers import LSTM, GRU
from keras.layers import TimeDistributed
from keras.layers import ConvLSTM2D
from keras.utils import to_categorical
from matplotlib import pyplot

from sklearn.model_selection import KFold
import pandas as pd
import os
import numpy as np
from sklearn import metrics

# Cross-Validate
kf = KFold(5, shuffle=True, random_state=42) # Use for KFold classification
fold = 0
for train, test in kf.split(dataset,labels):
    fold+=1
    print(f"Fold #{fold}")
        
    dat_train = dataset[train]
    print(dat_train.shape)
    lab_train = labels[train]
    print(lab_train.shape)
    dat_test = dataset[test]
    print(dat_test.shape)
    lab_test = labels[test]
    print(lab_test.shape)
    model = Sequential()
    model.add(ConvLSTM2D(filters=64, kernel_size=(3, 3),input_shape=(24, 64, 64, 3), return_sequences=False))
    model.add(BatchNormalization())

    #model.add(ConvLSTM2D(filters=40, kernel_size=(3, 3),padding='same', return_sequences=False))
    #model.add(BatchNormalization())

    model.add(Dropout(0.5))
    model.add(Flatten())
    model.add(Dense(100, activation='relu'))
    model.add(Dense(3, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    #print(model.summary())
    model.fit(dat_train,lab_train,validation_data=(dat_test,lab_test),batch_size=25,verbose=1,epochs=60)
    
    scores = model.evaluate(dat_test, lab_test, verbose=0)
    print("%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))